{"version":3,"sources":["../src/useInterval.ts","../src/utils.ts","../src/index.tsx"],"names":["useRef","useEffect","forwardRef","useState","useImperativeHandle","React","props"],"mappings":"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","file":"index.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n/** keep typescript happy */\nconst noop = () => {};\n\nexport function useInterval(\n  callback: () => void,\n  delay: number | null | false,\n  immediate?: boolean,\n) {\n  const savedCallback = useRef(noop);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  });\n\n  // Execute callback if immediate is set.\n  useEffect(() => {\n    if (!immediate) return;\n    if (delay === null || delay === false) return;\n    savedCallback.current();\n  }, [immediate]);\n\n  // Set up the interval.\n  useEffect(() => {\n    if (delay === null || delay === false) return undefined;\n    const tick = () => savedCallback.current();\n    const id = setInterval(tick, delay);\n    return () => clearInterval(id);\n  }, [delay]);\n}\n","export function randomValue(min: number, max: number): number {\n  return (Math.random() * (max - min + 1) + min)\n}\n\nexport function randomInt(min: number, max: number): number {\n  return Math.floor(randomValue(min, max))\n}\n","import * as React from \"react\";\nimport {\n  CSSProperties,\n  useEffect,\n  useState,\n  forwardRef,\n  useImperativeHandle,\n  useRef,\n} from \"react\";\nimport { useInterval } from \"./useInterval\";\nimport { randomInt, randomValue } from \"./utils\";\n\nexport interface IProps {\n  progress?: number;\n  color?: string;\n  shadow?: boolean;\n  background?: string;\n  height?: number;\n  onLoaderFinished?: () => void;\n  className?: string;\n  containerClassName?: string;\n  loaderSpeed?: number;\n  transitionTime?: number;\n  waitingTime?: number;\n  style?: CSSProperties;\n  containerStyle?: CSSProperties;\n  shadowStyle?: CSSProperties;\n}\n\nexport interface LoadingBarRef {\n  continuousStart: (startingValue?: number, refreshRate?: number) => void;\n  staticStart: (startingValue?: number) => void;\n  start: (\n    type?: \"continuous\" | \"static\",\n    startingValue?: number,\n    refreshRate?: number,\n  ) => void;\n  complete: () => void;\n  increase: (value: number) => void;\n  decrease: (value: number) => void;\n  getProgress: () => number;\n}\n\nconst LoadingBar = forwardRef<LoadingBarRef, IProps>(\n  (\n    {\n      progress,\n      height = 2,\n      className = \"\",\n      color = \"red\",\n      background = \"transparent\",\n      onLoaderFinished,\n      transitionTime = 300,\n      loaderSpeed = 500,\n      waitingTime = 1000,\n      shadow = true,\n      containerStyle = {},\n      style = {},\n      shadowStyle: shadowStyleProp = {},\n      containerClassName = \"\",\n    },\n    ref,\n  ) => {\n    const isMounted = useRef(false);\n    const [localProgress, localProgressSet] = useState<number>(0);\n\n    const pressedContinuous = useRef<{\n      active: boolean;\n      refreshRate: number;\n    }>({ active: false, refreshRate: 1000 });\n\n    const [pressedStaticStart, setStaticStartPressed] = useState<{\n      active: boolean;\n      value: number;\n    }>({ active: false, value: 60 });\n\n    const initialLoaderStyle: CSSProperties = {\n      height: \"100%\",\n      background: color,\n      transition: `all ${loaderSpeed}ms ease`,\n      width: \"0%\",\n    };\n\n    const loaderContainerStyle: CSSProperties = {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      height,\n      background,\n      zIndex: 99999999999,\n      width: 100 + \"%\",\n    };\n\n    const initialShadowStyles: CSSProperties = {\n      boxShadow: `0 0 10px ${color}, 0 0 10px ${color}`,\n      width: \"5%\",\n      opacity: 1,\n      position: \"absolute\",\n      height: \"100%\",\n      transition: `all ${loaderSpeed}ms ease`,\n      transform: \"rotate(2deg) translate(0px, -2px)\",\n      left: \"-10rem\",\n    };\n\n    const [loaderStyle, loaderStyleSet] =\n      useState<CSSProperties>(initialLoaderStyle);\n    const [shadowStyle, shadowStyleSet] =\n      useState<CSSProperties>(initialShadowStyles);\n\n    useEffect(() => {\n      isMounted.current = true;\n      return () => {\n        isMounted.current = false;\n      };\n    }, []);\n\n    useImperativeHandle(ref, () => ({\n      continuousStart(startingValue?: number, refreshRate: number = 1000) {\n        if (pressedStaticStart.active) return;\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n\n        const val = startingValue || randomInt(10, 20);\n\n        pressedContinuous.current = {\n          active: true,\n          refreshRate,\n        };\n\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      staticStart(startingValue?: number) {\n        if (pressedContinuous.current.active) return;\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n\n        const val = startingValue || randomInt(30, 60);\n\n        setStaticStartPressed({\n          active: true,\n          value: val,\n        });\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      start(type = \"continuous\", startingValue?: number, refreshRate?: number) {\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n\n        if (type === \"continuous\") {\n          pressedContinuous.current = {\n            active: true,\n            refreshRate: refreshRate || 1000,\n          };\n        } else {\n          setStaticStartPressed({\n            active: true,\n            value: startingValue || 20,\n          });\n        }\n\n        const continuousRandom = randomInt(10, 20);\n        const staticRandom = randomInt(30, 70);\n\n        const val =\n          startingValue ||\n          (type === \"continuous\" ? continuousRandom : staticRandom);\n\n        localProgressSet(val);\n        checkIfFull(val);\n      },\n      complete() {\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n        localProgressSet(100);\n        checkIfFull(100);\n      },\n      increase(value: number) {\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n        localProgressSet((prev) => {\n          const newVal = prev + value;\n          checkIfFull(newVal);\n          return newVal;\n        });\n      },\n      decrease(value: number) {\n        if (progress !== undefined) {\n          console.warn(\n            \"react-top-loading-bar: You can't use both controlling by props and ref methods to control the bar!\",\n          );\n          return;\n        }\n        localProgressSet((prev) => {\n          const newVal = prev - value;\n          checkIfFull(newVal);\n          return newVal;\n        });\n      },\n      getProgress() {\n        return localProgress;\n      },\n    }));\n\n    useEffect(() => {\n      loaderStyleSet({\n        ...loaderStyle,\n        background: color,\n      });\n\n      shadowStyleSet({\n        ...shadowStyle,\n        boxShadow: `0 0 10px ${color}, 0 0 5px ${color}`,\n      });\n    }, [color]);\n\n    useEffect(() => {\n      if (ref) {\n        if (ref && progress !== undefined) {\n          console.warn(\n            'react-top-loading-bar: You can\\'t use both controlling by props and ref methods to control the bar! Please use only props or only ref methods! Ref methods will override props if \"ref\" property is available.',\n          );\n          return;\n        }\n        checkIfFull(localProgress);\n      } else {\n        if (progress) checkIfFull(progress);\n      }\n    }, [progress]);\n\n    const checkIfFull = (_progress: number) => {\n      if (_progress >= 100) {\n        // now it should wait a little\n        loaderStyleSet({\n          ...loaderStyle,\n          width: \"100%\",\n        });\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 10 + \"%\",\n          });\n        }\n\n        setTimeout(() => {\n          if (!isMounted.current) {\n            return;\n          }\n          // now it can fade out\n          loaderStyleSet({\n            ...loaderStyle,\n            opacity: 0,\n            width: \"100%\",\n            transition: `all ${transitionTime}ms ease-out`,\n            color: color,\n          });\n\n          setTimeout(() => {\n            if (!isMounted.current) {\n              return;\n            }\n            // here we wait for it to fade\n            if (pressedContinuous.current.active) {\n              // if we have continuous loader just ending, we kill it and reset it\n\n              pressedContinuous.current = {\n                ...pressedContinuous.current,\n                active: false,\n              };\n\n              localProgressSet(0);\n              checkIfFull(0);\n            }\n\n            if (pressedStaticStart.active) {\n              setStaticStartPressed({\n                ...pressedStaticStart,\n                active: false,\n              });\n              localProgressSet(0);\n              checkIfFull(0);\n            }\n\n            if (onLoaderFinished) onLoaderFinished();\n            localProgressSet(0);\n            checkIfFull(0);\n          }, transitionTime);\n        }, waitingTime);\n      } else {\n        loaderStyleSet((_loaderStyle) => {\n          return {\n            ..._loaderStyle,\n            width: _progress + \"%\",\n            opacity: 1,\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : \"\",\n          };\n        });\n\n        if (shadow) {\n          shadowStyleSet({\n            ...shadowStyle,\n            left: _progress - 5.5 + \"%\",\n            transition: _progress > 0 ? `all ${loaderSpeed}ms ease` : \"\",\n          });\n        }\n      }\n    };\n\n    useInterval(\n      () => {\n        const minValue = Math.min(10, (100 - localProgress) / 5);\n        const maxValue = Math.min(20, (100 - localProgress) / 3);\n\n        const random = randomValue(minValue, maxValue);\n\n        if (localProgress + random < 95) {\n          localProgressSet(localProgress + random);\n          checkIfFull(localProgress + random);\n        }\n      },\n      pressedContinuous.current.active\n        ? pressedContinuous.current.refreshRate\n        : null,\n    );\n\n    return (\n      <div\n        className={containerClassName}\n        style={{ ...loaderContainerStyle, ...containerStyle }}\n      >\n        <div className={className} style={{ ...loaderStyle, ...style }}>\n          {shadow ? (\n            <div style={{ ...shadowStyle, ...shadowStyleProp }} />\n          ) : null}\n        </div>\n      </div>\n    );\n  },\n);\n\ninterface IContext\n  extends Omit<LoadingBarRef, \"continuousStart\" | \"staticStart\"> {\n  setProps: (props: IProps) => void;\n}\n\nconst LoaderContext = React.createContext<IContext>(undefined as any);\n\nexport const LoadingBarContainer = ({\n  children,\n  props,\n}: {\n  children: React.ReactNode;\n  props?: Omit<IProps, \"progress\">;\n}) => {\n  const [hookProps, setProps] = useState<IProps>(props || {});\n\n  const ref = useRef<LoadingBarRef>(null);\n\n  const start = (type: \"continuous\" | \"static\" = \"continuous\") =>\n    ref.current?.start(type);\n\n  return (\n    <LoaderContext.Provider\n      value={{\n        start,\n        complete: () => ref.current?.complete(),\n        getProgress: () => ref.current?.getProgress() || 0,\n        increase: (value: number) => ref.current?.increase(value),\n        decrease: (value: number) => ref.current?.decrease(value),\n        setProps: (props: IProps) => setProps({ ...props, ...hookProps }),\n      }}\n    >\n      <LoadingBar ref={ref} {...hookProps} />\n      {children}\n    </LoaderContext.Provider>\n  );\n};\n\nexport const useLoadingBar = (props?: IProps): Omit<IContext, \"setProps\"> => {\n  const context = React.useContext(LoaderContext);\n\n  if (!context) {\n    throw new Error(\n      \"[react-top-loading-bar] useLoadingBar hook must be used within a LoadingBarContainer. Try wrapping parent component in <LoadingBarContainer>.\",\n    );\n  }\n\n  useEffect(() => {\n    if (props) context.setProps(props);\n  }, []);\n\n  return {\n    start: context.start,\n    complete: context.complete,\n    increase: context.increase,\n    decrease: context.decrease,\n    getProgress: context.getProgress,\n  };\n};\n\nexport { LoadingBar as default };\n"]}